"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-speech-recognition";
exports.ids = ["vendor-chunks/react-speech-recognition"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-speech-recognition/dist/cc-BU0zEyYq.js":
/*!*******************************************************************!*\
  !*** ./node_modules/react-speech-recognition/dist/cc-BU0zEyYq.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _: () => (/* binding */ _async_to_generator)\n/* harmony export */ });\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) resolve(value);\n    else Promise.resolve(value).then(_next, _throw);\n}\nfunction _async_to_generator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcmVhY3Qtc3BlZWNoLXJlY29nbml0aW9uL2Rpc3QvY2MtQlUwekV5WXEuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVvQyIsInNvdXJjZXMiOlsiL1VzZXJzL3Nlai9NeURyaXZlL0NvZGluZ0Fzc2V0cy9lY29tbWVyY2Utc2VhcmNoLXJlY29tZW5kYXRpb24vc2hvcHBlcnMtY29uY2llcmdlLWZyb250ZW5kL25vZGVfbW9kdWxlcy9yZWFjdC1zcGVlY2gtcmVjb2duaXRpb24vZGlzdC9jYy1CVTB6RXlZcS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBhc3luY0dlbmVyYXRvclN0ZXAoZ2VuLCByZXNvbHZlLCByZWplY3QsIF9uZXh0LCBfdGhyb3csIGtleSwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdmFyIGluZm8gPSBnZW5ba2V5XShhcmcpO1xuICAgICAgICB2YXIgdmFsdWUgPSBpbmZvLnZhbHVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGluZm8uZG9uZSkgcmVzb2x2ZSh2YWx1ZSk7XG4gICAgZWxzZSBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG59XG5mdW5jdGlvbiBfYXN5bmNfdG9fZ2VuZXJhdG9yKGZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIF9uZXh0KHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gX3Rocm93KGVycikge1xuICAgICAgICAgICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgX25leHQodW5kZWZpbmVkKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuZXhwb3J0IHsgX2FzeW5jX3RvX2dlbmVyYXRvciBhcyBfIH07XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/dist/cc-BU0zEyYq.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/react-speech-recognition/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/react-speech-recognition/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SpeechRecognition),\n/* harmony export */   useSpeechRecognition: () => (/* binding */ useSpeechRecognition)\n/* harmony export */ });\n/* harmony import */ var _cc_BU0zEyYq_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cc-BU0zEyYq.js */ \"(ssr)/./node_modules/react-speech-recognition/dist/cc-BU0zEyYq.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var lodash_debounce__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash.debounce */ \"(ssr)/./node_modules/lodash.debounce/index.js\");\n\n\n\n\nconst NativeSpeechRecognition = typeof window !== \"undefined\" && (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition || window.oSpeechRecognition);\nconst isNative = (SpeechRecognition)=>SpeechRecognition === NativeSpeechRecognition;\n\nvar isAndroid = (()=>/(android)/i.test(typeof navigator !== \"undefined\" ? navigator.userAgent : \"\"));\n\nconst concatTranscripts = (...transcriptParts)=>{\n    return transcriptParts.map((t)=>t.trim()).join(\" \").trim();\n};\n// The command matching code is a modified version of Backbone.Router by Jeremy Ashkenas, under the MIT license.\nconst optionalParam = /\\s*\\((.*?)\\)\\s*/g;\nconst optionalRegex = /(\\(\\?:[^)]+\\))\\?/g;\nconst namedParam = /(\\(\\?)?:\\w+/g;\nconst splatParam = /\\*/g;\nconst escapeRegExp = /[-{}[\\]+?.,\\\\^$|#]/g;\nconst commandToRegExp = (command)=>{\n    if (command instanceof RegExp) {\n        return new RegExp(command.source, \"i\");\n    }\n    command = command.replace(escapeRegExp, \"\\\\$&\").replace(optionalParam, \"(?:$1)?\").replace(namedParam, (match, optional)=>{\n        return optional ? match : \"([^\\\\s]+)\";\n    }).replace(splatParam, \"(.*?)\").replace(optionalRegex, \"\\\\s*$1?\\\\s*\");\n    return new RegExp(\"^\" + command + \"$\", \"i\");\n};\n// this is from https://github.com/aceakash/string-similarity\nconst compareTwoStringsUsingDiceCoefficient = (first, second)=>{\n    first = first.replace(/\\s+/g, \"\").toLowerCase();\n    second = second.replace(/\\s+/g, \"\").toLowerCase();\n    if (!first.length && !second.length) return 1; // if both are empty strings\n    if (!first.length || !second.length) return 0; // if only one is empty string\n    if (first === second) return 1; // identical\n    if (first.length === 1 && second.length === 1) return 0; // both are 1-letter strings\n    if (first.length < 2 || second.length < 2) return 0; // if either is a 1-letter string\n    const firstBigrams = new Map();\n    for(let i = 0; i < first.length - 1; i++){\n        const bigram = first.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n        firstBigrams.set(bigram, count);\n    }\n    let intersectionSize = 0;\n    for(let i = 0; i < second.length - 1; i++){\n        const bigram = second.substring(i, i + 2);\n        const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0;\n        if (count > 0) {\n            firstBigrams.set(bigram, count - 1);\n            intersectionSize++;\n        }\n    }\n    return 2.0 * intersectionSize / (first.length + second.length - 2);\n};\nconst browserSupportsPolyfills = ()=>{\n    return typeof window !== \"undefined\" && window.navigator !== undefined && window.navigator.mediaDevices !== undefined && window.navigator.mediaDevices.getUserMedia !== undefined && (window.AudioContext !== undefined || window.webkitAudioContext !== undefined);\n};\n\nclass RecognitionManager {\n    setSpeechRecognition(SpeechRecognition) {\n        const browserSupportsRecogniser = !!SpeechRecognition && (isNative(SpeechRecognition) || browserSupportsPolyfills());\n        if (browserSupportsRecogniser) {\n            this.disableRecognition();\n            this.recognition = new SpeechRecognition();\n            this.recognition.continuous = false;\n            this.recognition.interimResults = true;\n            this.recognition.onresult = this.updateTranscript.bind(this);\n            this.recognition.onend = this.onRecognitionDisconnect.bind(this);\n            this.recognition.onerror = this.onError.bind(this);\n        }\n        this.emitBrowserSupportsSpeechRecognitionChange(browserSupportsRecogniser);\n    }\n    subscribe(id, callbacks) {\n        this.subscribers[id] = callbacks;\n    }\n    unsubscribe(id) {\n        delete this.subscribers[id];\n    }\n    emitListeningChange(listening) {\n        this.listening = listening;\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onListeningChange } = this.subscribers[id];\n            onListeningChange(listening);\n        });\n    }\n    emitMicrophoneAvailabilityChange(isMicrophoneAvailable) {\n        this.isMicrophoneAvailable = isMicrophoneAvailable;\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onMicrophoneAvailabilityChange } = this.subscribers[id];\n            onMicrophoneAvailabilityChange(isMicrophoneAvailable);\n        });\n    }\n    emitTranscriptChange(interimTranscript, finalTranscript) {\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onTranscriptChange } = this.subscribers[id];\n            onTranscriptChange(interimTranscript, finalTranscript);\n        });\n    }\n    emitClearTranscript() {\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onClearTranscript } = this.subscribers[id];\n            onClearTranscript();\n        });\n    }\n    emitBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange) {\n        Object.keys(this.subscribers).forEach((id)=>{\n            const { onBrowserSupportsSpeechRecognitionChange, onBrowserSupportsContinuousListeningChange } = this.subscribers[id];\n            onBrowserSupportsSpeechRecognitionChange(browserSupportsSpeechRecognitionChange);\n            onBrowserSupportsContinuousListeningChange(browserSupportsSpeechRecognitionChange);\n        });\n    }\n    disconnect(disconnectType) {\n        if (this.recognition && this.listening) {\n            switch(disconnectType){\n                case \"ABORT\":\n                    this.pauseAfterDisconnect = true;\n                    this.abort();\n                    break;\n                case \"RESET\":\n                    this.pauseAfterDisconnect = false;\n                    this.abort();\n                    break;\n                case \"STOP\":\n                default:\n                    this.pauseAfterDisconnect = true;\n                    this.stop();\n            }\n        }\n    }\n    disableRecognition() {\n        if (this.recognition) {\n            this.recognition.onresult = ()=>{};\n            this.recognition.onend = ()=>{};\n            this.recognition.onerror = ()=>{};\n            if (this.listening) {\n                this.stopListening();\n            }\n        }\n    }\n    onError(event) {\n        if (event && event.error && event.error === \"not-allowed\") {\n            this.emitMicrophoneAvailabilityChange(false);\n            this.disableRecognition();\n        }\n    }\n    onRecognitionDisconnect() {\n        this.onStopListening();\n        this.listening = false;\n        if (this.pauseAfterDisconnect) {\n            this.emitListeningChange(false);\n        } else if (this.recognition) {\n            if (this.recognition.continuous) {\n                this.startListening({\n                    continuous: this.recognition.continuous\n                });\n            } else {\n                this.emitListeningChange(false);\n            }\n        }\n        this.pauseAfterDisconnect = false;\n    }\n    updateTranscript({ results, resultIndex }) {\n        const currentIndex = resultIndex === undefined ? results.length - 1 : resultIndex;\n        this.interimTranscript = \"\";\n        this.finalTranscript = \"\";\n        for(let i = currentIndex; i < results.length; ++i){\n            if (results[i].isFinal && (!isAndroid() || results[i][0].confidence > 0)) {\n                this.updateFinalTranscript(results[i][0].transcript);\n            } else {\n                this.interimTranscript = concatTranscripts(this.interimTranscript, results[i][0].transcript);\n            }\n        }\n        let isDuplicateResult = false;\n        if (this.interimTranscript === \"\" && this.finalTranscript !== \"\") {\n            if (this.previousResultWasFinalOnly) {\n                isDuplicateResult = true;\n            }\n            this.previousResultWasFinalOnly = true;\n        } else {\n            this.previousResultWasFinalOnly = false;\n        }\n        if (!isDuplicateResult) {\n            this.emitTranscriptChange(this.interimTranscript, this.finalTranscript);\n        }\n    }\n    updateFinalTranscript(newFinalTranscript) {\n        this.finalTranscript = concatTranscripts(this.finalTranscript, newFinalTranscript);\n    }\n    resetTranscript() {\n        this.disconnect(\"RESET\");\n    }\n    startListening() {\n        return /*#__PURE__*/ (0,_cc_BU0zEyYq_js__WEBPACK_IMPORTED_MODULE_0__._)(function*({ continuous = false, language } = {}) {\n            if (!this.recognition) {\n                return;\n            }\n            const isContinuousChanged = continuous !== this.recognition.continuous;\n            const isLanguageChanged = language && language !== this.recognition.lang;\n            if (isContinuousChanged || isLanguageChanged) {\n                if (this.listening) {\n                    yield this.stopListening();\n                }\n                this.recognition.continuous = isContinuousChanged ? continuous : this.recognition.continuous;\n                this.recognition.lang = isLanguageChanged ? language : this.recognition.lang;\n            }\n            if (!this.listening) {\n                if (!this.recognition.continuous) {\n                    this.resetTranscript();\n                    this.emitClearTranscript();\n                }\n                try {\n                    yield this.start();\n                    this.emitListeningChange(true);\n                } catch (e) {\n                    // DOMExceptions indicate a redundant microphone start - safe to swallow\n                    if (!(e instanceof DOMException)) {\n                        this.emitMicrophoneAvailabilityChange(false);\n                    }\n                }\n            }\n        }).apply(this, arguments);\n    }\n    abortListening() {\n        return /*#__PURE__*/ (0,_cc_BU0zEyYq_js__WEBPACK_IMPORTED_MODULE_0__._)(function*() {\n            this.disconnect(\"ABORT\");\n            this.emitListeningChange(false);\n            yield new Promise((resolve)=>{\n                this.onStopListening = resolve;\n            });\n        }).call(this);\n    }\n    stopListening() {\n        return /*#__PURE__*/ (0,_cc_BU0zEyYq_js__WEBPACK_IMPORTED_MODULE_0__._)(function*() {\n            this.disconnect(\"STOP\");\n            this.emitListeningChange(false);\n            yield new Promise((resolve)=>{\n                this.onStopListening = resolve;\n            });\n        }).call(this);\n    }\n    getRecognition() {\n        return this.recognition;\n    }\n    start() {\n        return /*#__PURE__*/ (0,_cc_BU0zEyYq_js__WEBPACK_IMPORTED_MODULE_0__._)(function*() {\n            if (this.recognition && !this.listening) {\n                yield this.recognition.start();\n                this.listening = true;\n            }\n        }).call(this);\n    }\n    stop() {\n        if (this.recognition && this.listening) {\n            this.recognition.stop();\n            this.listening = false;\n        }\n    }\n    abort() {\n        if (this.recognition && this.listening) {\n            this.recognition.abort();\n            this.listening = false;\n        }\n    }\n    constructor(SpeechRecognition){\n        this.recognition = null;\n        this.pauseAfterDisconnect = false;\n        this.interimTranscript = \"\";\n        this.finalTranscript = \"\";\n        this.listening = false;\n        this.isMicrophoneAvailable = true;\n        this.subscribers = {};\n        this.onStopListening = ()=>{};\n        this.previousResultWasFinalOnly = false;\n        this.resetTranscript = this.resetTranscript.bind(this);\n        this.startListening = this.startListening.bind(this);\n        this.stopListening = this.stopListening.bind(this);\n        this.abortListening = this.abortListening.bind(this);\n        this.setSpeechRecognition = this.setSpeechRecognition.bind(this);\n        this.disableRecognition = this.disableRecognition.bind(this);\n        this.setSpeechRecognition(SpeechRecognition);\n        if (isAndroid()) {\n            this.updateFinalTranscript = lodash_debounce__WEBPACK_IMPORTED_MODULE_2__(this.updateFinalTranscript, 250, {\n                leading: true\n            });\n        }\n    }\n}\n\nconst CLEAR_TRANSCRIPT = \"CLEAR_TRANSCRIPT\";\nconst APPEND_TRANSCRIPT = \"APPEND_TRANSCRIPT\";\n\nconst clearTranscript = ()=>{\n    return {\n        type: CLEAR_TRANSCRIPT\n    };\n};\nconst appendTranscript = (interimTranscript, finalTranscript)=>{\n    return {\n        type: APPEND_TRANSCRIPT,\n        payload: {\n            interimTranscript,\n            finalTranscript\n        }\n    };\n};\n\nconst transcriptReducer = (state, action)=>{\n    switch(action.type){\n        case CLEAR_TRANSCRIPT:\n            return {\n                interimTranscript: \"\",\n                finalTranscript: \"\"\n            };\n        case APPEND_TRANSCRIPT:\n            return {\n                interimTranscript: action.payload.interimTranscript,\n                finalTranscript: concatTranscripts(state.finalTranscript, action.payload.finalTranscript)\n            };\n        default:\n            throw new Error();\n    }\n};\n\nlet _browserSupportsSpeechRecognition = !!NativeSpeechRecognition;\nlet _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !isAndroid();\nlet recognitionManager;\nconst useSpeechRecognition = ({ transcribing = true, clearTranscriptOnListen = true, commands = [] } = {})=>{\n    const [recognitionManager] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(SpeechRecognition.getRecognitionManager());\n    const [browserSupportsSpeechRecognition, setBrowserSupportsSpeechRecognition] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_browserSupportsSpeechRecognition);\n    const [browserSupportsContinuousListening, setBrowserSupportsContinuousListening] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(_browserSupportsContinuousListening);\n    const [{ interimTranscript, finalTranscript }, dispatch] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useReducer)(transcriptReducer, {\n        interimTranscript: recognitionManager.interimTranscript,\n        finalTranscript: \"\"\n    });\n    const [listening, setListening] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(recognitionManager.listening);\n    const [isMicrophoneAvailable, setMicrophoneAvailable] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(recognitionManager.isMicrophoneAvailable);\n    const commandsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(commands);\n    commandsRef.current = commands;\n    const dispatchClearTranscript = ()=>{\n        dispatch(clearTranscript());\n    };\n    const resetTranscript = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        recognitionManager.resetTranscript();\n        dispatchClearTranscript();\n    }, [\n        recognitionManager\n    ]);\n    const testFuzzyMatch = (command, input, fuzzyMatchingThreshold)=>{\n        const commandToString = typeof command === \"object\" ? command.toString() : command;\n        const commandWithoutSpecials = commandToString.replace(/[&/\\\\#,+()!$~%.'\":*?<>{}]/g, \"\").replace(/  +/g, \" \").trim();\n        const howSimilar = compareTwoStringsUsingDiceCoefficient(commandWithoutSpecials, input);\n        if (howSimilar >= fuzzyMatchingThreshold) {\n            return {\n                command,\n                commandWithoutSpecials,\n                howSimilar,\n                isFuzzyMatch: true\n            };\n        }\n        return null;\n    };\n    const testMatch = (command, input)=>{\n        const pattern = commandToRegExp(command);\n        const result = pattern.exec(input);\n        if (result) {\n            return {\n                command,\n                parameters: result.slice(1)\n            };\n        }\n        return null;\n    };\n    const matchCommands = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((newInterimTranscript, newFinalTranscript)=>{\n        commandsRef.current.forEach(({ command, callback, matchInterim = false, isFuzzyMatch = false, fuzzyMatchingThreshold = 0.8, bestMatchOnly = false })=>{\n            const input = !newFinalTranscript && matchInterim ? newInterimTranscript.trim() : newFinalTranscript.trim();\n            const subcommands = Array.isArray(command) ? command : [\n                command\n            ];\n            const results = subcommands.map((subcommand)=>{\n                if (isFuzzyMatch) {\n                    return testFuzzyMatch(subcommand, input, fuzzyMatchingThreshold);\n                }\n                return testMatch(subcommand, input);\n            }).filter((x)=>x);\n            if (isFuzzyMatch && bestMatchOnly && results.length >= 2) {\n                results.sort((a, b)=>b.howSimilar - a.howSimilar);\n                const { command, commandWithoutSpecials, howSimilar } = results[0];\n                callback(commandWithoutSpecials, input, howSimilar, {\n                    command,\n                    resetTranscript\n                });\n            } else {\n                results.forEach((result)=>{\n                    if (result.isFuzzyMatch) {\n                        const { command, commandWithoutSpecials, howSimilar } = result;\n                        callback(commandWithoutSpecials, input, howSimilar, {\n                            command,\n                            resetTranscript\n                        });\n                    } else {\n                        const { command, parameters } = result;\n                        callback(...parameters, {\n                            command,\n                            resetTranscript\n                        });\n                    }\n                });\n            }\n        });\n    }, [\n        resetTranscript\n    ]);\n    const handleTranscriptChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((newInterimTranscript, newFinalTranscript)=>{\n        if (transcribing) {\n            dispatch(appendTranscript(newInterimTranscript, newFinalTranscript));\n        }\n        matchCommands(newInterimTranscript, newFinalTranscript);\n    }, [\n        matchCommands,\n        transcribing\n    ]);\n    const handleClearTranscript = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)(()=>{\n        if (clearTranscriptOnListen) {\n            dispatchClearTranscript();\n        }\n    }, [\n        clearTranscriptOnListen\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const id = SpeechRecognition.counter;\n        SpeechRecognition.counter += 1;\n        const callbacks = {\n            onListeningChange: setListening,\n            onMicrophoneAvailabilityChange: setMicrophoneAvailable,\n            onTranscriptChange: handleTranscriptChange,\n            onClearTranscript: handleClearTranscript,\n            onBrowserSupportsSpeechRecognitionChange: setBrowserSupportsSpeechRecognition,\n            onBrowserSupportsContinuousListeningChange: setBrowserSupportsContinuousListening\n        };\n        recognitionManager.subscribe(id, callbacks);\n        return ()=>{\n            recognitionManager.unsubscribe(id);\n        };\n    }, [\n        transcribing,\n        clearTranscriptOnListen,\n        recognitionManager,\n        handleTranscriptChange,\n        handleClearTranscript\n    ]);\n    const transcript = concatTranscripts(finalTranscript, interimTranscript);\n    return {\n        transcript,\n        interimTranscript,\n        finalTranscript,\n        listening,\n        isMicrophoneAvailable,\n        resetTranscript,\n        browserSupportsSpeechRecognition,\n        browserSupportsContinuousListening\n    };\n};\nconst SpeechRecognition = {\n    counter: 0,\n    applyPolyfill: (PolyfillSpeechRecognition)=>{\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(PolyfillSpeechRecognition);\n        } else {\n            recognitionManager = new RecognitionManager(PolyfillSpeechRecognition);\n        }\n        const browserSupportsPolyfill = !!PolyfillSpeechRecognition && browserSupportsPolyfills();\n        _browserSupportsSpeechRecognition = browserSupportsPolyfill;\n        _browserSupportsContinuousListening = browserSupportsPolyfill;\n    },\n    removePolyfill: ()=>{\n        if (recognitionManager) {\n            recognitionManager.setSpeechRecognition(NativeSpeechRecognition);\n        } else {\n            recognitionManager = new RecognitionManager(NativeSpeechRecognition);\n        }\n        _browserSupportsSpeechRecognition = !!NativeSpeechRecognition;\n        _browserSupportsContinuousListening = _browserSupportsSpeechRecognition && !isAndroid();\n    },\n    getRecognitionManager: ()=>{\n        if (!recognitionManager) {\n            recognitionManager = new RecognitionManager(NativeSpeechRecognition);\n        }\n        return recognitionManager;\n    },\n    getRecognition: ()=>{\n        const recognitionManager = SpeechRecognition.getRecognitionManager();\n        return recognitionManager.getRecognition();\n    },\n    startListening: ({ continuous, language } = {})=>/*#__PURE__*/ (0,_cc_BU0zEyYq_js__WEBPACK_IMPORTED_MODULE_0__._)(function*() {\n            const recognitionManager = SpeechRecognition.getRecognitionManager();\n            yield recognitionManager.startListening({\n                continuous,\n                language\n            });\n        })(),\n    stopListening: ()=>/*#__PURE__*/ (0,_cc_BU0zEyYq_js__WEBPACK_IMPORTED_MODULE_0__._)(function*() {\n            const recognitionManager = SpeechRecognition.getRecognitionManager();\n            yield recognitionManager.stopListening();\n        })(),\n    abortListening: ()=>/*#__PURE__*/ (0,_cc_BU0zEyYq_js__WEBPACK_IMPORTED_MODULE_0__._)(function*() {\n            const recognitionManager = SpeechRecognition.getRecognitionManager();\n            yield recognitionManager.abortListening();\n        })(),\n    browserSupportsSpeechRecognition: ()=>_browserSupportsSpeechRecognition,\n    browserSupportsContinuousListening: ()=>_browserSupportsContinuousListening\n};\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-speech-recognition/dist/index.js\n");

/***/ })

};
;